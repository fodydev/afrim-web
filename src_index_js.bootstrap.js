"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkafrim_web"] = self["webpackChunkafrim_web"] || []).push([["src_index_js"],{

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadConfig: () => (/* binding */ loadConfig)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils__WEBPACK_IMPORTED_MODULE_0__]);\n_utils__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Load the afrim configuration through an URL.\nasync function loadConfig(config_file) {\n  const data = await (0,_utils__WEBPACK_IMPORTED_MODULE_0__.httpGet)(config_file);\n  const content = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tomlToJson)(data);\n  let auto_capitalize = false;\n\n  if (content.has(\"core\")) {\n    auto_capitalize = content.get(\"core\").get(\"auto_capitalize\") || false;\n  }\n\n  if (content.has(\"translation\")) {\n    for (const translation of content.get(\"translation\")) {\n      const key = translation[0];\n      const value = translation[1];\n\n      // We extract the translation.\n      if (typeof value == \"string\") {\n        __webpack_require__.g.afrim.dictionary[key] = [value];\n      } else if (value.has(\"path\")) {\n        await loadConfig(new URL(value.get(\"path\"), config_file).href);\n      } else if (value.has(\"alias\")) {\n        let data = null;\n\n        if (value.has(\"values\")) {\n          data = value.get(\"values\");\n        } else {\n          data = [value.get(\"value\")];\n        }\n\n        for (const alias of value.get(\"alias\")) {\n          __webpack_require__.g.afrim.dictionary[alias] = data;\n        }\n        __webpack_require__.g.afrim.dictionary[key] = data;\n      } else {\n        throw new Error(`load config error: ${value} unexpected`);\n      }\n    }\n  }\n\n  // We extract the data.\n  if (content.has(\"data\")) {\n    for (const data of content.get(\"data\")) {\n      const key = data[0];\n      const value = data[1];\n\n      if (typeof value == \"string\") {\n        __webpack_require__.g.afrim.data[key] = value;\n      } else if (value.has(\"path\")) {\n        await loadConfig(new URL(value.get(\"path\"), config_file).href);\n      } else if (value.has(\"alias\")) {\n        const data = value.get(\"value\");\n        for (const alias of value.get(\"alias\")) {\n          __webpack_require__.g.afrim.data[alias] = data;\n\n          if (auto_capitalize) {\n            __webpack_require__.g.afrim.data[data[0].toUpperCase() + data.slice(1)] =\n              data.toUpperCase();\n          }\n        }\n        __webpack_require__.g.afrim.data[key] = data;\n\n        if (auto_capitalize) {\n          __webpack_require__.g.afrim.data[key[0].toUpperCase() + key.slice(1)] =\n            data.toUpperCase();\n        }\n      } else {\n        throw new Error(`load config error: ${value} unexpected`);\n      }\n    }\n  }\n\n  // We extract the translators.\n  if (content.has(\"translators\")) {\n    for (const translator of content.get(\"translators\")) {\n      const key = translator[0];\n      const value = translator[1];\n      const data = await (0,_utils__WEBPACK_IMPORTED_MODULE_0__.httpGet)(new URL(value, config_file).href);\n\n      __webpack_require__.g.afrim.translators[key] = data;\n    }\n  }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://afrim-web/./src/config.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var afrim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! afrim-js */ \"./node_modules/afrim-js/afrim_js.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([afrim_js__WEBPACK_IMPORTED_MODULE_0__, _config__WEBPACK_IMPORTED_MODULE_1__]);\n([afrim_js__WEBPACK_IMPORTED_MODULE_0__, _config__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n// Afrim\n__webpack_require__.g.afrim = Object({\n  predicates: Array(),\n  predicateId: 0,\n  pageSize: 5,\n  isIdle: false,\n  cursorPos: 0,\n  data: Object(),\n  dictionary: Object(),\n  translators: Object(),\n});\n\n(async function () {\n  // Binding\n  const textFieldElement = document.getElementById(\"textfield\");\n  const downloadStatusElement = document.getElementById(\"download-status\");\n  const tooltipElement = document.getElementById(\"tooltip\");\n  const tooltipInputElement = document.getElementById(\"tooltip-input\");\n  const tooltipPredicatesElement =\n    document.getElementById(\"tooltip-predicates\");\n\n  // Clear the predicates.\n  const clearPredicate = () => {\n    tooltipPredicatesElement.innerHTML = \"\";\n    __webpack_require__.g.afrim.predicateId = 0;\n    __webpack_require__.g.afrim.predicates = Array();\n  };\n\n  // Load predicates in the memory\n  const loadPredicates = (predicates) => {\n    clearPredicate();\n    var predicateId = 0;\n\n    for (const predicate of predicates) {\n      for (const text of predicate.texts) {\n        __webpack_require__.g.afrim.predicates.push([\n          ++predicateId,\n          predicate.code,\n          predicate.remaining_code,\n          text,\n          predicate.can_commit,\n        ]);\n      }\n    }\n  };\n\n  // Update the predicates.\n  const updatePredicate = () => {\n    tooltipPredicatesElement.innerHTML = \"\";\n\n    let counter = 0;\n    // We get the current the page\n    const predicates = __webpack_require__.g.afrim.predicates\n      .slice(__webpack_require__.g.afrim.predicateId, __webpack_require__.g.afrim.predicates.length)\n      .concat(__webpack_require__.g.afrim.predicates.slice(0, __webpack_require__.g.afrim.predicateId));\n\n    for (const predicate of predicates) {\n      // Mark the selected predicate.\n      const c = counter == 0 ? \"✏️\" : \"\";\n\n      if (counter++ > __webpack_require__.g.afrim.pageSize) break;\n\n      // Config the tooltip predicate element.\n      const el = document.createElement(\"a\");\n      el.classList.add(\"dropdown-item\");\n      el.innerText = `${c} ${predicate[0]}. ${predicate[3]} ~${predicate[2]}`;\n      [\"pointerdown\", \"click\"].forEach((e) => {\n        el.addEventListener(\n          e,\n          () => {\n            preprocessor.commit(predicate[3]);\n            preprocessor.process(\"\", \"keydown\");\n            clearPredicate();\n          },\n          false,\n        );\n      });\n      tooltipPredicatesElement.append(el);\n    }\n  };\n\n  // Restore cursor position.\n  const restoreCursorPosition = () => {\n    textFieldElement.focus();\n    textFieldElement.setSelectionRange(\n      __webpack_require__.g.afrim.cursorPos,\n      __webpack_require__.g.afrim.cursorPos,\n    );\n  };\n\n  // We execute preprocessor commands in idle.\n  const processCommand = () => {\n    const cmd = preprocessor.popQueue();\n    const textValue = textFieldElement.value;\n\n    __webpack_require__.g.afrim.cursorPos =\n      __webpack_require__.g.afrim.cursorPos < 0 ? 0 : __webpack_require__.g.afrim.cursorPos;\n\n    if (cmd) {\n      if (cmd == \"Delete\") {\n        textFieldElement.value =\n          textValue.substring(0, __webpack_require__.g.afrim.cursorPos - 1) +\n          textValue.substring(__webpack_require__.g.afrim.cursorPos, textValue.length);\n        __webpack_require__.g.afrim.cursorPos--;\n        restoreCursorPosition();\n      } else if (cmd == \"Pause\") {\n        __webpack_require__.g.afrim.isIdle = true;\n      } else if (cmd == \"Resume\") {\n        __webpack_require__.g.afrim.isIdle = false;\n      } else if (cmd == \"NOP\") {\n      } else if (cmd.CommitText) {\n        textFieldElement.value =\n          textValue.substring(0, __webpack_require__.g.afrim.cursorPos) +\n          cmd.CommitText +\n          textValue.substring(__webpack_require__.g.afrim.cursorPos, textValue.length);\n        __webpack_require__.g.afrim.cursorPos += cmd.CommitText.length;\n        restoreCursorPosition();\n      } else {\n        console.error(`afrim command \"${cmd}\" unsupported.`);\n      }\n    }\n\n    requestAnimationFrame(processCommand);\n  };\n\n  // We wait that the afrim ime engine is ready.\n  textFieldElement.disabled = true;\n  downloadStatusElement.hidden = false;\n\n  // We download the datalang.\n  const lang = sessionStorage.getItem(\"lang\");\n  document.getElementById(lang).classList.toggle(\"is-active\");\n  await (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadConfig)(\n    `https://raw.githubusercontent.com/pythonbrad/afrim-data/4b177197bb37c9742cd90627b1ad543c32ec791b/${lang}/${lang}.toml`,\n  );\n\n  // We mark the text field busy.\n  textFieldElement.disabled = false;\n  downloadStatusElement.hidden = true;\n\n  // We config the afrim ime.\n  const preprocessor = new afrim_js__WEBPACK_IMPORTED_MODULE_0__.Preprocessor(__webpack_require__.g.afrim.data, 64);\n  const translator = new afrim_js__WEBPACK_IMPORTED_MODULE_0__.Translator(__webpack_require__.g.afrim.dictionary, false);\n  __webpack_require__.g.afrim.toto = preprocessor;\n  Object.entries(__webpack_require__.g.afrim.translators).forEach((e) =>\n    translator.register(e[0], e[1]),\n  );\n\n  // We listen keyboard events.\n  textFieldElement.addEventListener(\n    \"keyup\",\n    (event) => {\n      __webpack_require__.g.afrim.cursorPos = textFieldElement.selectionEnd;\n\n      // We manage special keys.\n      if (event.ctrlKey) {\n        // Previous predicate.\n        if (event.code == \"ShiftLeft\") {\n          __webpack_require__.g.afrim.predicateId =\n            __webpack_require__.g.afrim.predicateId < 1\n              ? __webpack_require__.g.afrim.predicates.length - 1\n              : __webpack_require__.g.afrim.predicateId - 1;\n          updatePredicate();\n        }\n        // Next predicate.\n        else if (event.code == \"ShiftRight\") {\n          __webpack_require__.g.afrim.predicateId =\n            __webpack_require__.g.afrim.predicateId >= __webpack_require__.g.afrim.predicates.length - 1\n              ? 0\n              : __webpack_require__.g.afrim.predicateId + 1;\n          updatePredicate();\n        }\n        // Commit the predicate.\n        else if (event.code == \"Space\") {\n          var predicate = __webpack_require__.g.afrim.predicates[__webpack_require__.g.afrim.predicateId];\n\n          if (predicate) preprocessor.commit(predicate[3]);\n          clearPredicate();\n        } else if (\n          event.code == \"ControlLeft\" ||\n          event.code == \"ControlRight\"\n        ) {\n          __webpack_require__.g.afrim.isIdle = !__webpack_require__.g.afrim.idle;\n        }\n\n        return;\n      }\n\n      if (event.key == \"GroupPrevious\" || event.key == \"GroupNext\") return;\n      if (__webpack_require__.g.afrim.isIdle) return;\n\n      const changed = preprocessor.process(event.key, \"keydown\");\n      const input = preprocessor.getInput();\n\n      // We update the predicates\n      if (!changed) return;\n\n      tooltipInputElement.innerText = \"📝 \" + input;\n\n      const predicates = translator.translate(input);\n      loadPredicates(predicates);\n      updatePredicate();\n    },\n    false,\n  );\n\n  // Make the tooltip follow the mouse.\n  textFieldElement.addEventListener(\n    \"keyup\",\n    (event) => {\n      const getCaretCoordinates = __webpack_require__(/*! textarea-caret */ \"./node_modules/textarea-caret/index.js\");\n      const caret = getCaretCoordinates(\n        textFieldElement,\n        textFieldElement.selectionEnd,\n      );\n\n      tooltipElement.style.top =\n        125 +\n        textFieldElement.offsetTop -\n        textFieldElement.scrollTop +\n        caret.top +\n        \"px\";\n      tooltipElement.style.left =\n        50 +\n        textFieldElement.offsetLeft -\n        textFieldElement.scrollLeft +\n        caret.left +\n        \"px\";\n    },\n    false,\n  );\n\n  // Make the tooltip active inside of the textfield.\n  [\"click\", \"touchstart\"].forEach((e) => {\n    textFieldElement.addEventListener(\n      e,\n      () => {\n        tooltipElement.classList.add(\"is-active\");\n        preprocessor.process(\"\", \"keydown\");\n        clearPredicate();\n      },\n      false,\n    );\n  });\n\n  // Hide the tooltip if not typing\n  textFieldElement.addEventListener(\"blur\", (e) => {\n    tooltipElement.classList.remove(\"is-active\");\n  });\n\n  // We start the processor.\n  requestAnimationFrame(processCommand);\n})();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://afrim-web/./src/index.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpGet: () => (/* binding */ httpGet),\n/* harmony export */   isTouchDevice: () => (/* binding */ isTouchDevice),\n/* harmony export */   tomlToJson: () => (/* binding */ tomlToJson)\n/* harmony export */ });\n/* harmony import */ var afrim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! afrim-js */ \"./node_modules/afrim-js/afrim_js.js\");\n/* harmony import */ var ky__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ky */ \"./node_modules/ky/distribution/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([afrim_js__WEBPACK_IMPORTED_MODULE_0__]);\nafrim_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n// Convert TOML to JSON.\nfunction tomlToJson(data) {\n  return (0,afrim_js__WEBPACK_IMPORTED_MODULE_0__.convertTomlToJson)(data);\n}\n\n// Make a http get request.\n// HTTP because we want a fast request.\nasync function httpGet(url) {\n  const response = await (0,ky__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(url);\n\n  if (!response.ok) throw new Error(`Fetch error: ${response.statusText}`);\n\n  return await response.text();\n}\n\n// Whether if the device is a mobile\nfunction isTouchDevice() {\n  return (\n    !!(\n      typeof window !== \"undefined\" &&\n      (\"ontouchstart\" in window ||\n        (window.DocumentTouch &&\n          typeof document !== \"undefined\" &&\n          document instanceof window.DocumentTouch))\n    ) ||\n    !!(\n      typeof navigator !== \"undefined\" &&\n      (navigator.maxTouchPoints || navigator.msMaxTouchPoints)\n    )\n  );\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://afrim-web/./src/utils.js?");

/***/ })

}]);